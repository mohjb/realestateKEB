'use strict';

window.app = angular.module('kdipaApp', ['fsaPreBuilt', 'ui.router', 'ui.bootstrap', 'ngAnimate', 'treeControl']);

app.config(function ($urlRouterProvider, $locationProvider) {
    // This turns off hashbang urls (/#about) and changes it to something normal (/about)
    $locationProvider.html5Mode(true);
    // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
    $urlRouterProvider.otherwise('/');
    // Trigger page refresh when accessing an OAuth route
    $urlRouterProvider.when('/auth/:provider', function () {
        window.location.reload();
    });
});

// This app.run is for controlling access to specific states.
app.run(function ($rootScope, AuthService, $state) {

    // The given state requires an authenticated user.
    var destinationStateRequiresAuth = function destinationStateRequiresAuth(state) {
        return state.data && state.data.authenticate;
    };

    // $stateChangeStart is an event fired
    // whenever the process of changing a state begins.
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {

        if (!destinationStateRequiresAuth(toState)) {
            // The destination state does not require authentication
            // Short circuit with return.
            return;
        }

        if (AuthService.isAuthenticated()) {
            // The user is authenticated.
            // Short circuit with return.
            return;
        }

        // Cancel navigating to new state.
        event.preventDefault();

        AuthService.getLoggedInUser().then(function (user) {
            // If a user is retrieved, then renavigate to the destination
            // (the second time, AuthService.isAuthenticated() will work)
            // otherwise, if no user is logged in, go to "login" state.
            if (user) {
                $state.go(toState.name, toParams);
            } else {
                $state.go('login');
            }
        });
    });
});

app.config(function ($stateProvider) {

    // Register our *about* state.
    $stateProvider.state('about', {
        url: '/about',
        controller: 'AboutController',
        templateUrl: 'js/about/about.html'
    });
});

app.controller('AboutController', function ($scope, FullstackPics) {

    // Images of beautiful Fullstack people.
    $scope.images = _.shuffle(FullstackPics);
});
app.config(function ($stateProvider) {
    $stateProvider.state('analysis', {
        url: '/analysis',
        templateUrl: 'js/analysis/analysis.html',
        controller: 'AnalysisCtrl',
        abstract: true,
        resolve: {
            sectors: function sectors(SectorsFactory) {
                return SectorsFactory.getSectors();
            }
        }
    });
});

app.controller('AnalysisCtrl', function ($scope, sectors) {
    $scope.sectors = sectors;
    $scope.currentSector = sectors[0];

    $scope.handleSelection = function (newSelection) {
        $scope.currentSector = newSelection;
    };
});

app.config(function ($stateProvider) {
    $stateProvider.state('docs', {
        url: '/docs',
        templateUrl: 'js/docs/docs.html'
    });
});

(function () {

    'use strict';

    // Hope you didn't forget Angular! Duh-doy.

    if (!window.angular) throw new Error('I can\'t find Angular!');

    var app = angular.module('fsaPreBuilt', []);

    app.factory('Socket', function () {
        if (!window.io) throw new Error('socket.io not found!');
        return window.io(window.location.origin);
    });

    // AUTH_EVENTS is used throughout our app to
    // broadcast and listen from and to the $rootScope
    // for important events about authentication flow.
    app.constant('AUTH_EVENTS', {
        loginSuccess: 'auth-login-success',
        loginFailed: 'auth-login-failed',
        logoutSuccess: 'auth-logout-success',
        sessionTimeout: 'auth-session-timeout',
        notAuthenticated: 'auth-not-authenticated',
        notAuthorized: 'auth-not-authorized'
    });

    app.factory('AuthInterceptor', function ($rootScope, $q, AUTH_EVENTS) {
        var statusDict = {
            401: AUTH_EVENTS.notAuthenticated,
            403: AUTH_EVENTS.notAuthorized,
            419: AUTH_EVENTS.sessionTimeout,
            440: AUTH_EVENTS.sessionTimeout
        };
        return {
            responseError: function responseError(response) {
                $rootScope.$broadcast(statusDict[response.status], response);
                return $q.reject(response);
            }
        };
    });

    app.config(function ($httpProvider) {
        $httpProvider.interceptors.push(['$injector', function ($injector) {
            return $injector.get('AuthInterceptor');
        }]);
    });

    app.service('AuthService', function ($http, Session, $rootScope, AUTH_EVENTS, $q) {

        function onSuccessfulLogin(response) {
            var data = response.data;
            Session.create(data.id, data.user);
            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
            return data.user;
        }

        // Uses the session factory to see if an
        // authenticated user is currently registered.
        this.isAuthenticated = function () {
            return !!Session.user;
        };

        this.getLoggedInUser = function (fromServer) {

            // If an authenticated session exists, we
            // return the user attached to that session
            // with a promise. This ensures that we can
            // always interface with this method asynchronously.

            // Optionally, if true is given as the fromServer parameter,
            // then this cached value will not be used.

            if (this.isAuthenticated() && fromServer !== true) {
                return $q.when(Session.user);
            }

            // Make request GET /session.
            // If it returns a user, call onSuccessfulLogin with the response.
            // If it returns a 401 response, we catch it and instead resolve to null.
            return $http.get('/session').then(onSuccessfulLogin).catch(function () {
                return null;
            });
        };

        this.login = function (credentials) {
            return $http.post('/login', credentials).then(onSuccessfulLogin).catch(function () {
                return $q.reject({ message: 'Invalid login credentials.' });
            });
        };

        this.logout = function () {
            return $http.get('/logout').then(function () {
                Session.destroy();
                $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
            });
        };
    });

    app.service('Session', function ($rootScope, AUTH_EVENTS) {

        var self = this;

        $rootScope.$on(AUTH_EVENTS.notAuthenticated, function () {
            self.destroy();
        });

        $rootScope.$on(AUTH_EVENTS.sessionTimeout, function () {
            self.destroy();
        });

        this.id = null;
        this.user = null;

        this.create = function (sessionId, user) {
            this.id = sessionId;
            this.user = user;
        };

        this.destroy = function () {
            this.id = null;
            this.user = null;
        };
    });
})();

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: 'js/home/home.html'
    });
});
app.config(function ($stateProvider) {

    $stateProvider.state('login', {
        url: '/login',
        templateUrl: 'js/login/login.html',
        controller: 'LoginCtrl'
    });
});

app.controller('LoginCtrl', function ($scope, AuthService, $state) {

    $scope.login = {};
    $scope.error = null;

    $scope.sendLogin = function (loginInfo) {

        $scope.error = null;

        AuthService.login(loginInfo).then(function () {
            $state.go('home');
        }).catch(function () {
            $scope.error = 'Invalid login credentials.';
        });
    };
});
app.config(function ($stateProvider) {

    $stateProvider.state('membersOnly', {
        url: '/members-area',
        template: '<img ng-repeat="item in stash" width="300" ng-src="{{ item }}" />',
        controller: function controller($scope, SecretStash) {
            SecretStash.getStash().then(function (stash) {
                $scope.stash = stash;
            });
        },
        // The following data.authenticate is read by an event listener
        // that controls access to this state. Refer to app.js.
        data: {
            authenticate: true
        }
    });
});

app.factory('SecretStash', function ($http) {

    var getStash = function getStash() {
        return $http.get('/api/members/secret-stash').then(function (response) {
            return response.data;
        });
    };

    return {
        getStash: getStash
    };
});
app.config(function ($stateProvider) {
    $stateProvider.state('investment', {
        url: '/js/investment/index.html',
        templateUrl: "/js/investment/index.html"
    });
});
app.config(function ($stateProvider) {
    $stateProvider.state('analysis.overview', {
        url: '',
        templateUrl: "js/sector-overview/sector-overview.html"
    });
});

app.config(function ($stateProvider) {
    $stateProvider.state('analysis.spiderChart', {
        url: '/spider-chart',
        templateUrl: 'js/spider-chart/spider-chart.html',
        controller: 'SpiderChartCtrl',
        resolve: {
            countries: function countries(CountryFactory) {
                return CountryFactory.getAll();
            },
            years: function years(YearFactory) {
                return YearFactory.getAll();
            }
        }
    });
});

app.controller('SpiderChartCtrl', function ($scope, countries, years, DataFactory, IndexFactory) {

    $scope.indices;
    $scope.currentIndices = [];
    $scope.data;

    $scope.type = 'country';

    $scope.treeOptions = {
        dirSelectable: true,
        multiSelection: true
    };

    function loadIndices(sectorId) {
        return IndexFactory.getAllBySector(sectorId).then(function (indices) {
            $scope.indices = indices;
            $scope.currentIndex = indices[0];
        });
    }

    $scope.choose = function (choice) {
        $scope.choice = choice.name || choice.value;
    };

    $scope.$watchCollection('type', function () {
        if ($scope.type === 'country') $scope.options = countries;else $scope.options = years;

        $scope.choice = 'choose a ' + $scope.type;
    });

    $scope.$watchCollection('currentSector', function () {
        loadIndices($scope.currentSector.id);
    });
});

app.config(function ($stateProvider) {
    $stateProvider.state('analysis.timeSeries', {
        url: '/time-series',
        templateUrl: 'js/time-series/time-series.html',
        controller: 'TimeSeriesCtrl'
    });
});

app.controller('TimeSeriesCtrl', function ($scope, DataFactory, IndexFactory) {
    $scope.indices;
    $scope.currentIndex;
    $scope.data;

    function loadData(indexId) {
        return DataFactory.getByQuery({
            indexId: indexId
        }).then(function (data) {
            return $scope.data = data;
        });
    }

    function loadIndices(sectorId) {
        return IndexFactory.getAllBySector(sectorId).then(function (indices) {
            $scope.indices = indices;
            $scope.currentIndex = indices[0];
        });
    }

    function loadContent() {
        return loadIndices($scope.currentSector.id).then(function () {
            return loadData($scope.indices[0].id);
        });
    }

    function updateTitle() {
        var title = $scope.currentIndex.name + ' time-series (' + $scope.type + ')';

        if (!$scope.data.rank.length && !$scope.data.value.length) title = 'No Data Found for ' + $scope.currentIndex.name;
        d3.select('.c3-title').node().innerHTML = title;
    }

    function updateType() {
        if (!$scope.data[$scope.type].length) {
            $scope.type = $scope.type === "rank" ? "value" : "rank";
        }
    }

    $scope.treeOptions = {
        dirSelectable: true
    };
    $scope.type = "rank";
    var chart = void 0;

    $scope.handleIndexSelect = function (index) {
        $scope.currentIndex = index;
        loadData(index.id);
    };

    loadContent().then(function () {
        chart = c3.generate({
            bindto: d3.select('.chart'),
            title: {
                text: ''
            },
            data: {
                xFormat: '%Y',
                json: [],
                keys: {
                    x: 'year',
                    value: $scope.data.countries
                }
            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        format: '%Y'
                    }
                }
            }
        });
    });

    $scope.$watchCollection('type', function () {
        updateTitle();
        chart.load({
            xFormat: '%Y',
            json: $scope.data[$scope.type],
            keys: {
                x: 'year',
                value: $scope.data.countries
            }
        });
    });

    $scope.$watchCollection('data', function () {
        updateTitle();
        updateType();
        chart.load({
            xFormat: '%Y',
            json: $scope.data[$scope.type],
            keys: {
                x: 'year',
                value: $scope.data.countries
            }
        });
    });

    $scope.$watchCollection('currentSector', function () {
        updateTitle();
        chart.unload({
            ids: $scope.data.countries
        });
        setTimeout(function () {
            loadContent();
        }, 500);
    });
});

app.factory('CountryFactory', function ($http) {

    var CountryFactory = {};

    CountryFactory.getAll = function () {
        var endpoint = 'api/countries';
        return $http.get(endpoint).then(function (res) {
            return res.data;
        }).catch(function (err) {
            return console.error("Shit's broken at " + endpoint + JSON.stringify(err));
        });
    };

    return CountryFactory;
});

app.factory('DataFactory', function ($http) {

    var DataFactory = {};

    function objectToQuerystring(obj) {
        return Object.keys(obj).map(function (key) {
            return key + '=' + obj[key];
        }).join('&');
    }

    DataFactory.getByIndex = function (indexId) {
        var endpoint = 'api/indices/' + indexId + '/variables';
        return $http.get(endpoint).then(function (response) {
            return response.data;
        }).catch(function (err) {
            return console.error("Shit's broken at " + endpoint + JSON.stringify(err));
        });
    };

    DataFactory.getByQuery = function (query) {
        var endpoint = 'api/variables/timeseries?' + objectToQuerystring(query);
        return $http.get(endpoint).then(function (response) {
            return response.data;
        });
    };

    return DataFactory;
});

app.factory('FullstackPics', function () {
    return ['https://pbs.twimg.com/media/B7gBXulCAAAXQcE.jpg:large', 'https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-xap1/t31.0-8/10862451_10205622990359241_8027168843312841137_o.jpg', 'https://pbs.twimg.com/media/B-LKUshIgAEy9SK.jpg', 'https://pbs.twimg.com/media/B79-X7oCMAAkw7y.jpg', 'https://pbs.twimg.com/media/B-Uj9COIIAIFAh0.jpg:large', 'https://pbs.twimg.com/media/B6yIyFiCEAAql12.jpg:large', 'https://pbs.twimg.com/media/CE-T75lWAAAmqqJ.jpg:large', 'https://pbs.twimg.com/media/CEvZAg-VAAAk932.jpg:large', 'https://pbs.twimg.com/media/CEgNMeOXIAIfDhK.jpg:large', 'https://pbs.twimg.com/media/CEQyIDNWgAAu60B.jpg:large', 'https://pbs.twimg.com/media/CCF3T5QW8AE2lGJ.jpg:large', 'https://pbs.twimg.com/media/CAeVw5SWoAAALsj.jpg:large', 'https://pbs.twimg.com/media/CAaJIP7UkAAlIGs.jpg:large', 'https://pbs.twimg.com/media/CAQOw9lWEAAY9Fl.jpg:large', 'https://pbs.twimg.com/media/B-OQbVrCMAANwIM.jpg:large', 'https://pbs.twimg.com/media/B9b_erwCYAAwRcJ.png:large', 'https://pbs.twimg.com/media/B5PTdvnCcAEAl4x.jpg:large', 'https://pbs.twimg.com/media/B4qwC0iCYAAlPGh.jpg:large', 'https://pbs.twimg.com/media/B2b33vRIUAA9o1D.jpg:large', 'https://pbs.twimg.com/media/BwpIwr1IUAAvO2_.jpg:large', 'https://pbs.twimg.com/media/BsSseANCYAEOhLw.jpg:large', 'https://pbs.twimg.com/media/CJ4vLfuUwAAda4L.jpg:large', 'https://pbs.twimg.com/media/CI7wzjEVEAAOPpS.jpg:large', 'https://pbs.twimg.com/media/CIdHvT2UsAAnnHV.jpg:large', 'https://pbs.twimg.com/media/CGCiP_YWYAAo75V.jpg:large', 'https://pbs.twimg.com/media/CIS4JPIWIAI37qu.jpg:large'];
});

app.factory('IndexFactory', function ($http) {

    var IndexFactory = {};

    IndexFactory.getAllBySector = function (sectorId) {
        var endpoint = 'api/sectors/' + sectorId + '/indices';
        return $http.get(endpoint).then(function (res) {
            return res.data;
        }).catch(function (err) {
            return console.error("Shit's broken at " + endpoint + JSON.stringify(err));
        });
    };

    return IndexFactory;
});

app.factory('RandomGreetings', function () {

    var getRandomFromArray = function getRandomFromArray(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
    };

    var greetings = ['Hello, world!', 'At long last, I live!', 'Hello, simple human.', 'What a beautiful day!', 'I\'m like any other project, except that I am yours. :)', 'This empty string is for Lindsay Levine.', 'こんにちは、ユーザー様。', 'Welcome. To. WEBSITE.', ':D', 'Yes, I think we\'ve met before.', 'Gimme 3 mins... I just grabbed this really dope frittata', 'If Cooper could offer only one piece of advice, it would be to nevSQUIRREL!'];

    return {
        greetings: greetings,
        getRandomGreeting: function getRandomGreeting() {
            return getRandomFromArray(greetings);
        }
    };
});

app.factory('SectorsFactory', function ($http) {

    var SectorsFactory = {};

    var endpoint = '/api/sectors';

    SectorsFactory.getSectors = function () {
        return $http.get('/api/sectors').then(function (response) {
            return response.data;
        }).catch(function (err) {
            return console.error("Shit's broken at /api/sectors/! " + JSON.stringify(err));
        });
    };

    return SectorsFactory;
});

app.factory('YearFactory', function ($http) {

    var YearFactory = {};

    YearFactory.getAll = function () {
        var endpoint = 'api/years';
        return $http.get(endpoint).then(function (res) {
            return res.data;
        }).catch(function (err) {
            return console.error("Shit's broken at " + endpoint + JSON.stringify(err));
        });
    };

    return YearFactory;
});

app.directive('logo', function () {
    return {
        restrict: 'E',
        scope: {
            type: "@"
        },
        templateUrl: 'js/common/directives/logo/logo.html'
    };
});

app.directive('navbar', function ($rootScope, AuthService, AUTH_EVENTS, $state) {

    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'js/common/directives/navbar/navbar.html',
        link: function link(scope) {

            scope.items = [{ label: 'Home', state: 'home' }, { label: 'Analysis', state: 'analysis.overview' }, { label: 'Downloads', state: 'downloads' }
			, { label: 'Kuwait Investment Map', state: 'investment' }
            // { label: 'Members Only', state: 'membersOnly', auth: true }
            ];

            scope.isNavCollapsed = true;

            scope.user = null;

            scope.isLoggedIn = function () {
                return AuthService.isAuthenticated();
            };

            scope.logout = function () {
                AuthService.logout().then(function () {
                    $state.go('home');
                });
            };

            var setUser = function setUser() {
                AuthService.getLoggedInUser().then(function (user) {
                    scope.user = user;
                });
            };

            var removeUser = function removeUser() {
                scope.user = null;
            };

            setUser();

            $rootScope.$on(AUTH_EVENTS.loginSuccess, setUser);
            $rootScope.$on(AUTH_EVENTS.logoutSuccess, removeUser);
            $rootScope.$on(AUTH_EVENTS.sessionTimeout, removeUser);
        }

    };
});

app.directive('randoGreeting', function (RandomGreetings) {

    return {
        restrict: 'E',
        templateUrl: 'js/common/directives/rando-greeting/rando-greeting.html',
        link: function link(scope) {
            scope.greeting = RandomGreetings.getRandomGreeting();
        }
    };
});
app.directive('sectorSelector', function () {
    return {
        restrict: 'E',
        scope: {
            sectors: "=",
            onSelect: "="
        },
        templateUrl: "js/common/directives/sector-selector/sector-selector.html",
        link: function link(scope) {
            scope.selection = scope.sectors[0];

            scope.$watchCollection('selection', function () {
                scope.onSelect(scope.selection);
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
